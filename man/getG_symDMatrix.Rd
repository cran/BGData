% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{getG_symDMatrix}
\alias{getG_symDMatrix}
\title{Computes a Very Large Genomic Relationship Matrix.}
\usage{
getG_symDMatrix(X, center = TRUE, scale = TRUE, scaleG = TRUE,
  folderOut = paste0("symDMatrix_", randomString()), vmode = "double",
  i = seq_len(nrow(X)), j = seq_len(ncol(X)), blockSize = 5000L,
  nTasks = nCores, nCores = getOption("mc.cores", 2L), verbose = FALSE)
}
\arguments{
\item{X}{A matrix-like object, typically \code{@geno} of a \linkS4class{BGData}
object.}

\item{center}{Either a logical value or a numeric vector of length equal to
the number of columns of \code{X}. If \code{FALSE}, no centering is done. Defaults to
\code{TRUE}.}

\item{scale}{Either a logical value or a numeric vector of length equal to
the number of columns of \code{X}. If \code{FALSE}, no scaling is done. Defaults to
\code{TRUE}.}

\item{scaleG}{TRUE/FALSE whether xx' must be scaled.}

\item{folderOut}{The path to the folder where to save the
\link[symDMatrix:symDMatrix-class]{symDMatrix::symDMatrix} object. Defaults to a random string prefixed
with "symDMatrix_".}

\item{vmode}{vmode of \code{ff} objects.}

\item{i}{Indicates which rows of \code{X} should be used. Can be integer,
boolean, or character. By default, all rows are used.}

\item{j}{Indicates which columns of \code{X} should be used. Can be integer,
boolean, or character. By default, all columns are used.}

\item{blockSize}{The number of rows and columns of each block. If \code{NULL}, a
single block of the same length as \code{i} will be created. Defaults to 5000.}

\item{nTasks}{The number of tasks the problem should be broken into to be
distributed among \code{nCores} cores. Defaults to \code{nCores}.}

\item{nCores}{The number of cores (passed to \code{\link[parallel:mclapply]{parallel::mclapply()}}).
Defaults to the number of cores as detected by \code{\link[parallel:detectCores]{parallel::detectCores()}}.}

\item{verbose}{Whether progress updates will be posted. Defaults to \code{FALSE}.}
}
\value{
A \link[symDMatrix:symDMatrix-class]{symDMatrix::symDMatrix} object.
}
\description{
Computes a positive semi-definite symmetric genomic relation matrix G=XX'
offering options for centering and scaling the columns of \code{X} beforehand.
}
\details{
Even very large genomic relationship matrices are supported by partitioning
\code{X} into blocks and calling \code{\link[=getG]{getG()}} on these blocks. This function performs
the block computations sequentially, which may be slow. In an HPC
environment, performance can be improved by manually distributing these
operations to different nodes.
}
\section{Multi-level parallelism}{

Functions with the \code{nCores}, \code{nTasks}, \code{i}, and \code{j} parameters provide
capabilities for both parallel and distributed computing.

For parallel computing, \code{nCores} determines the number of cores the code is
run on, and \code{nTasks} determines into how many tasks the problem is divided
into. \code{nTasks} should be at least as high as \code{nCores} to keep all cores
busy. Memory usage can be an issue for higher values of \code{nCores} and
\code{nTasks} as R is not particularly memory-efficient. As a rule of thumb, at
least around \code{object_size(X) + (nCores * (object_size(X) / nTasks)) + object_size(result)} MB of total memory will be needed for operations on
memory-mapped matrices, not including potential copies of your data that
might be created (for example \code{\link[stats:lsfit]{stats::lsfit()}} runs \code{cbind(1, X)}). \code{i} and
\code{j} can be used to include or exclude certain rows or columns. Internally,
the \code{\link[parallel:mclapply]{parallel::mclapply()}} function is used and therefore parallel computing
will not work on Windows machines.

For distributed computing, \code{i} and \code{j} determine the subset of the input
matrix that the code runs on. In an HPC environment, this can be used not
just to include or exclude certain rows or columns, but also to partition
the task among many nodes rather than cores. Scheduler-specific code and
code to aggregate the results need to be written by the user. It is
recommended to set \code{nCores} and \code{nTasks} to \code{1} as nodes are often cheaper
than cores.
}

